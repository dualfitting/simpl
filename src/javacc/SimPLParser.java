/* Generated By:JJTree&JavaCC: Do not edit this line. SimPLParser.java */
package javacc;

import java.util.ArrayList;
import semantics.SimPLTypes;

public class SimPLParser/*@bgen(jjtree)*/implements SimPLParserTreeConstants, SimPLParserConstants {/*@bgen(jjtree)*/
  protected JJTSimPLParserState jjtree = new JJTSimPLParserState();

/*
 * SimPL Grammar
 */

// Program structuring syntax follows
  final public SimpleNode Start() throws ParseException {
 /*@bgen(jjtree) Start */
  ASTStart jjtn000 = (ASTStart)ASTStart.jjtCreate(this, JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Expression();
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

// Expression syntax follows
  final public void Expression() throws ParseException {
 /*@bgen(jjtree) Expression */
  ASTExpression jjtn000 = (ASTExpression)ASTExpression.jjtCreate(this, JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      SequenceExpression();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Variable() throws ParseException {
 /*@bgen(jjtree) Variable */
        ASTVariable jjtn000 = (ASTVariable)ASTVariable.jjtCreate(this, JJTVARIABLE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token identifier;
    try {
      identifier = jj_consume_token(IDENTIFIER);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.setName(identifier.image);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Value() throws ParseException {
 /*@bgen(jjtree) Value */
        ASTValue jjtn000 = (ASTValue)ASTValue.jjtCreate(this, JJTVALUE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token val;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
        val = jj_consume_token(INTEGER);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        jjtn000.setIntValue(Integer.parseInt(val.image));
        jjtn000.setType(SimPLTypes.TYPE_INTEGER);
        break;
      case TRUE:
        jj_consume_token(TRUE);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        jjtn000.setBoolValue(true);
        jjtn000.setType(SimPLTypes.TYPE_BOOLEAN);
        break;
      case FALSE:
        jj_consume_token(FALSE);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setBoolValue(false);
                jjtn000.setType(SimPLTypes.TYPE_BOOLEAN);
        break;
      case NIL:
        jj_consume_token(NIL);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setListValue(new ArrayList<Object>());
                jjtn000.setType(SimPLTypes.TYPE_LIST);
        break;
      case NOP:
        jj_consume_token(NOP);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        jjtn000.setType(SimPLTypes.TYPE_UNIT);
        break;
      case FUN:
      ASTAnonymousFunctionNode jjtn001 = (ASTAnonymousFunctionNode)ASTAnonymousFunctionNode.jjtCreate(this, JJTANONYMOUSFUNCTIONNODE);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
        try {
          jj_consume_token(FUN);
          Variable();
          jj_consume_token(ARROW);
          Expression();
        } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte001;}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) throw (ParseException)jjte001;}
      }
      {if (true) throw (Error)jjte001;}
        } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
        }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        jjtn000.setType(SimPLTypes.TYPE_FUNCTION);
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void CommonLeftBracketExpression() throws ParseException {
 /*@bgen(jjtree) CommonLeftBracketExpression */
  ASTCommonLeftBracketExpression jjtn000 = (ASTCommonLeftBracketExpression)ASTCommonLeftBracketExpression.jjtCreate(this, JJTCOMMONLEFTBRACKETEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LPAREN);
      Expression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEGATIVE:
      case LPAREN:
      case LET:
      case IF:
      case WHILE:
      case FIRST:
      case SECOND:
      case HEAD:
      case TAIL:
      case NIL:
      case NOT:
      case FUN:
      case TRUE:
      case FALSE:
      case INTEGER:
      case IDENTIFIER:
      case NOP:
        ApplicationExpression();
        break;
      case RPAREN:
        BracketExpression();
        break;
      case COMMA:
        PairExpression();
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

// e := (e1, e2)
  final public void PairExpression() throws ParseException {
 /*@bgen(jjtree) PairExpression */
  ASTPairExpression jjtn000 = (ASTPairExpression)ASTPairExpression.jjtCreate(this, JJTPAIREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(COMMA);
      Expression();
      jj_consume_token(RPAREN);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

// e := (e1 e2)
  final public void ApplicationExpression() throws ParseException {
 /*@bgen(jjtree) ApplicationExpression */
  ASTApplicationExpression jjtn000 = (ASTApplicationExpression)ASTApplicationExpression.jjtCreate(this, JJTAPPLICATIONEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Expression();
      jj_consume_token(RPAREN);
    } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte000;}
       }
       if (jjte000 instanceof ParseException) {
         {if (true) throw (ParseException)jjte000;}
       }
       {if (true) throw (Error)jjte000;}
    } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
    }
  }

// e := (e)
  final public void BracketExpression() throws ParseException {
 /*@bgen(jjtree) BracketExpression */
  ASTBracketExpression jjtn000 = (ASTBracketExpression)ASTBracketExpression.jjtCreate(this, JJTBRACKETEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(RPAREN);
    } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
    }
  }

// e := let x = e1 in e2 end
  final public void LetExpression() throws ParseException {
 /*@bgen(jjtree) LetExpression */
  ASTLetExpression jjtn000 = (ASTLetExpression)ASTLetExpression.jjtCreate(this, JJTLETEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LET);
      Variable();
      jj_consume_token(EQUAL);
      Expression();
      jj_consume_token(IN);
      Expression();
      jj_consume_token(END);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

// e := if e1 then e2 else e3 end
  final public void IfThenElseExpression() throws ParseException {
 /*@bgen(jjtree) IfThenElseExpression */
  ASTIfThenElseExpression jjtn000 = (ASTIfThenElseExpression)ASTIfThenElseExpression.jjtCreate(this, JJTIFTHENELSEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IF);
      Expression();
      jj_consume_token(THEN);
      Expression();
      jj_consume_token(ELSE);
      Expression();
      jj_consume_token(END);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

// e := e1;e2
  final public void SequenceExpression() throws ParseException {
 /*@bgen(jjtree) SequenceExpression */
  ASTSequenceExpression jjtn000 = (ASTSequenceExpression)ASTSequenceExpression.jjtCreate(this, JJTSEQUENCEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      AssignExpression();
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SEMICOLON:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_1;
        }
        jj_consume_token(SEMICOLON);
        AssignExpression();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

// e := e1 := e2
  final public void AssignExpression() throws ParseException {
    JoinExpression();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      jj_consume_token(ASSIGN);
                ASTAssignNode jjtn001 = (ASTAssignNode)ASTAssignNode.jjtCreate(this, JJTASSIGNNODE);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
      try {
        JoinExpression();
      } catch (Throwable jjte001) {
                if (jjtc001) {
                  jjtree.clearNodeScope(jjtn001);
                  jjtc001 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte001 instanceof RuntimeException) {
                  {if (true) throw (RuntimeException)jjte001;}
                }
                if (jjte001 instanceof ParseException) {
                  {if (true) throw (ParseException)jjte001;}
                }
                {if (true) throw (Error)jjte001;}
      } finally {
                if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001,  2);
                }
      }
    }
  }

  final public void JoinExpression() throws ParseException {
    ConditionalExpression();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case JOIN:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_3;
      }
      jj_consume_token(JOIN);
                   ASTJoinNode jjtn001 = (ASTJoinNode)ASTJoinNode.jjtCreate(this, JJTJOINNODE);
                   boolean jjtc001 = true;
                   jjtree.openNodeScope(jjtn001);
      try {
        ConditionalExpression();
      } catch (Throwable jjte001) {
                   if (jjtc001) {
                     jjtree.clearNodeScope(jjtn001);
                     jjtc001 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte001 instanceof RuntimeException) {
                     {if (true) throw (RuntimeException)jjte001;}
                   }
                   if (jjte001 instanceof ParseException) {
                     {if (true) throw (ParseException)jjte001;}
                   }
                   {if (true) throw (Error)jjte001;}
      } finally {
                   if (jjtc001) {
                     jjtree.closeNodeScope(jjtn001,  2);
                   }
      }
    }
  }

  final public void ConditionalExpression() throws ParseException {
    EqualityExpression();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
      case OR:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        jj_consume_token(AND);
                    ASTConditionalAndNode jjtn001 = (ASTConditionalAndNode)ASTConditionalAndNode.jjtCreate(this, JJTCONDITIONALANDNODE);
                    boolean jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
        try {
          EqualityExpression();
        } catch (Throwable jjte001) {
                    if (jjtc001) {
                      jjtree.clearNodeScope(jjtn001);
                      jjtc001 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte001 instanceof RuntimeException) {
                      {if (true) throw (RuntimeException)jjte001;}
                    }
                    if (jjte001 instanceof ParseException) {
                      {if (true) throw (ParseException)jjte001;}
                    }
                    {if (true) throw (Error)jjte001;}
        } finally {
                    if (jjtc001) {
                      jjtree.closeNodeScope(jjtn001,  2);
                    }
        }
        break;
      case OR:
        jj_consume_token(OR);
                    ASTConditionalOrNode jjtn002 = (ASTConditionalOrNode)ASTConditionalOrNode.jjtCreate(this, JJTCONDITIONALORNODE);
                    boolean jjtc002 = true;
                    jjtree.openNodeScope(jjtn002);
        try {
          EqualityExpression();
        } catch (Throwable jjte002) {
                    if (jjtc002) {
                      jjtree.clearNodeScope(jjtn002);
                      jjtc002 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte002 instanceof RuntimeException) {
                      {if (true) throw (RuntimeException)jjte002;}
                    }
                    if (jjte002 instanceof ParseException) {
                      {if (true) throw (ParseException)jjte002;}
                    }
                    {if (true) throw (Error)jjte002;}
        } finally {
                    if (jjtc002) {
                      jjtree.closeNodeScope(jjtn002,  2);
                    }
        }
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void EqualityExpression() throws ParseException {
    AdditiveExpression();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUAL:
      case LESSTHAN:
      case BIGGERTHAN:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUAL:
        jj_consume_token(EQUAL);
                      ASTEqualityEqualNode jjtn001 = (ASTEqualityEqualNode)ASTEqualityEqualNode.jjtCreate(this, JJTEQUALITYEQUALNODE);
                      boolean jjtc001 = true;
                      jjtree.openNodeScope(jjtn001);
        try {
          AdditiveExpression();
        } catch (Throwable jjte001) {
                      if (jjtc001) {
                        jjtree.clearNodeScope(jjtn001);
                        jjtc001 = false;
                      } else {
                        jjtree.popNode();
                      }
                      if (jjte001 instanceof RuntimeException) {
                        {if (true) throw (RuntimeException)jjte001;}
                      }
                      if (jjte001 instanceof ParseException) {
                        {if (true) throw (ParseException)jjte001;}
                      }
                      {if (true) throw (Error)jjte001;}
        } finally {
                      if (jjtc001) {
                        jjtree.closeNodeScope(jjtn001,  2);
                      }
        }
        break;
      case BIGGERTHAN:
        jj_consume_token(BIGGERTHAN);
                           ASTEqualityBiggerThanNode jjtn002 = (ASTEqualityBiggerThanNode)ASTEqualityBiggerThanNode.jjtCreate(this, JJTEQUALITYBIGGERTHANNODE);
                           boolean jjtc002 = true;
                           jjtree.openNodeScope(jjtn002);
        try {
          AdditiveExpression();
        } catch (Throwable jjte002) {
                           if (jjtc002) {
                             jjtree.clearNodeScope(jjtn002);
                             jjtc002 = false;
                           } else {
                             jjtree.popNode();
                           }
                           if (jjte002 instanceof RuntimeException) {
                             {if (true) throw (RuntimeException)jjte002;}
                           }
                           if (jjte002 instanceof ParseException) {
                             {if (true) throw (ParseException)jjte002;}
                           }
                           {if (true) throw (Error)jjte002;}
        } finally {
                           if (jjtc002) {
                             jjtree.closeNodeScope(jjtn002,  2);
                           }
        }
        break;
      case LESSTHAN:
        jj_consume_token(LESSTHAN);
                         ASTEqualityLessThanNode jjtn003 = (ASTEqualityLessThanNode)ASTEqualityLessThanNode.jjtCreate(this, JJTEQUALITYLESSTHANNODE);
                         boolean jjtc003 = true;
                         jjtree.openNodeScope(jjtn003);
        try {
          AdditiveExpression();
        } catch (Throwable jjte003) {
                         if (jjtc003) {
                           jjtree.clearNodeScope(jjtn003);
                           jjtc003 = false;
                         } else {
                           jjtree.popNode();
                         }
                         if (jjte003 instanceof RuntimeException) {
                           {if (true) throw (RuntimeException)jjte003;}
                         }
                         if (jjte003 instanceof ParseException) {
                           {if (true) throw (ParseException)jjte003;}
                         }
                         {if (true) throw (Error)jjte003;}
        } finally {
                         if (jjtc003) {
                           jjtree.closeNodeScope(jjtn003,  2);
                         }
        }
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void AdditiveExpression() throws ParseException {
    MultiplicativeExpression();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
                     ASTAdditivePlusNode jjtn001 = (ASTAdditivePlusNode)ASTAdditivePlusNode.jjtCreate(this, JJTADDITIVEPLUSNODE);
                     boolean jjtc001 = true;
                     jjtree.openNodeScope(jjtn001);
        try {
          MultiplicativeExpression();
        } catch (Throwable jjte001) {
                     if (jjtc001) {
                       jjtree.clearNodeScope(jjtn001);
                       jjtc001 = false;
                     } else {
                       jjtree.popNode();
                     }
                     if (jjte001 instanceof RuntimeException) {
                       {if (true) throw (RuntimeException)jjte001;}
                     }
                     if (jjte001 instanceof ParseException) {
                       {if (true) throw (ParseException)jjte001;}
                     }
                     {if (true) throw (Error)jjte001;}
        } finally {
                     if (jjtc001) {
                       jjtree.closeNodeScope(jjtn001,  2);
                     }
        }
        break;
      case MINUS:
        jj_consume_token(MINUS);
                      ASTAdditiveMinusNode jjtn002 = (ASTAdditiveMinusNode)ASTAdditiveMinusNode.jjtCreate(this, JJTADDITIVEMINUSNODE);
                      boolean jjtc002 = true;
                      jjtree.openNodeScope(jjtn002);
        try {
          MultiplicativeExpression();
        } catch (Throwable jjte002) {
                      if (jjtc002) {
                        jjtree.clearNodeScope(jjtn002);
                        jjtc002 = false;
                      } else {
                        jjtree.popNode();
                      }
                      if (jjte002 instanceof RuntimeException) {
                        {if (true) throw (RuntimeException)jjte002;}
                      }
                      if (jjte002 instanceof ParseException) {
                        {if (true) throw (ParseException)jjte002;}
                      }
                      {if (true) throw (Error)jjte002;}
        } finally {
                      if (jjtc002) {
                        jjtree.closeNodeScope(jjtn002,  2);
                      }
        }
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void MultiplicativeExpression() throws ParseException {
    UnaryExpression();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLY:
      case DIVIDE:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLY:
        jj_consume_token(MULTIPLY);
                         ASTMultiplicativeMultiplyNode jjtn001 = (ASTMultiplicativeMultiplyNode)ASTMultiplicativeMultiplyNode.jjtCreate(this, JJTMULTIPLICATIVEMULTIPLYNODE);
                         boolean jjtc001 = true;
                         jjtree.openNodeScope(jjtn001);
        try {
          UnaryExpression();
        } catch (Throwable jjte001) {
                         if (jjtc001) {
                           jjtree.clearNodeScope(jjtn001);
                           jjtc001 = false;
                         } else {
                           jjtree.popNode();
                         }
                         if (jjte001 instanceof RuntimeException) {
                           {if (true) throw (RuntimeException)jjte001;}
                         }
                         if (jjte001 instanceof ParseException) {
                           {if (true) throw (ParseException)jjte001;}
                         }
                         {if (true) throw (Error)jjte001;}
        } finally {
                         if (jjtc001) {
                           jjtree.closeNodeScope(jjtn001,  2);
                         }
        }
        break;
      case DIVIDE:
        jj_consume_token(DIVIDE);
                       ASTMultiplicativeDivideNode jjtn002 = (ASTMultiplicativeDivideNode)ASTMultiplicativeDivideNode.jjtCreate(this, JJTMULTIPLICATIVEDIVIDENODE);
                       boolean jjtc002 = true;
                       jjtree.openNodeScope(jjtn002);
        try {
          UnaryExpression();
        } catch (Throwable jjte002) {
                       if (jjtc002) {
                         jjtree.clearNodeScope(jjtn002);
                         jjtc002 = false;
                       } else {
                         jjtree.popNode();
                       }
                       if (jjte002 instanceof RuntimeException) {
                         {if (true) throw (RuntimeException)jjte002;}
                       }
                       if (jjte002 instanceof ParseException) {
                         {if (true) throw (ParseException)jjte002;}
                       }
                       {if (true) throw (Error)jjte002;}
        } finally {
                       if (jjtc002) {
                         jjtree.closeNodeScope(jjtn002,  2);
                       }
        }
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void UnaryExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
                ASTUnaryNotNode jjtn001 = (ASTUnaryNotNode)ASTUnaryNotNode.jjtCreate(this, JJTUNARYNOTNODE);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
      try {
        UnaryExpression();
      } catch (Throwable jjte001) {
                if (jjtc001) {
                  jjtree.clearNodeScope(jjtn001);
                  jjtc001 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte001 instanceof RuntimeException) {
                  {if (true) throw (RuntimeException)jjte001;}
                }
                if (jjte001 instanceof ParseException) {
                  {if (true) throw (ParseException)jjte001;}
                }
                {if (true) throw (Error)jjte001;}
      } finally {
                if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001, true);
                }
      }
      break;
    case NEGATIVE:
      jj_consume_token(NEGATIVE);
                     ASTUnaryNegativeNode jjtn002 = (ASTUnaryNegativeNode)ASTUnaryNegativeNode.jjtCreate(this, JJTUNARYNEGATIVENODE);
                     boolean jjtc002 = true;
                     jjtree.openNodeScope(jjtn002);
      try {
        UnaryExpression();
      } catch (Throwable jjte002) {
                     if (jjtc002) {
                       jjtree.clearNodeScope(jjtn002);
                       jjtc002 = false;
                     } else {
                       jjtree.popNode();
                     }
                     if (jjte002 instanceof RuntimeException) {
                       {if (true) throw (RuntimeException)jjte002;}
                     }
                     if (jjte002 instanceof ParseException) {
                       {if (true) throw (ParseException)jjte002;}
                     }
                     {if (true) throw (Error)jjte002;}
      } finally {
                     if (jjtc002) {
                       jjtree.closeNodeScope(jjtn002, true);
                     }
      }
      break;
    case LPAREN:
    case LET:
    case IF:
    case WHILE:
    case FIRST:
    case SECOND:
    case HEAD:
    case TAIL:
    case NIL:
    case FUN:
    case TRUE:
    case FALSE:
    case INTEGER:
    case IDENTIFIER:
    case NOP:
      SetExpression();
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void SetExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HEAD:
      jj_consume_token(HEAD);
                 ASTHeadOfListExpression jjtn001 = (ASTHeadOfListExpression)ASTHeadOfListExpression.jjtCreate(this, JJTHEADOFLISTEXPRESSION);
                 boolean jjtc001 = true;
                 jjtree.openNodeScope(jjtn001);
      try {
        SetExpression();
      } catch (Throwable jjte001) {
                 if (jjtc001) {
                   jjtree.clearNodeScope(jjtn001);
                   jjtc001 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte001 instanceof RuntimeException) {
                   {if (true) throw (RuntimeException)jjte001;}
                 }
                 if (jjte001 instanceof ParseException) {
                   {if (true) throw (ParseException)jjte001;}
                 }
                 {if (true) throw (Error)jjte001;}
      } finally {
                 if (jjtc001) {
                   jjtree.closeNodeScope(jjtn001, true);
                 }
      }
      break;
    case TAIL:
      jj_consume_token(TAIL);
             ASTTailOfListExpression jjtn002 = (ASTTailOfListExpression)ASTTailOfListExpression.jjtCreate(this, JJTTAILOFLISTEXPRESSION);
             boolean jjtc002 = true;
             jjtree.openNodeScope(jjtn002);
      try {
        SetExpression();
      } catch (Throwable jjte002) {
             if (jjtc002) {
               jjtree.clearNodeScope(jjtn002);
               jjtc002 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte002 instanceof RuntimeException) {
               {if (true) throw (RuntimeException)jjte002;}
             }
             if (jjte002 instanceof ParseException) {
               {if (true) throw (ParseException)jjte002;}
             }
             {if (true) throw (Error)jjte002;}
      } finally {
             if (jjtc002) {
               jjtree.closeNodeScope(jjtn002, true);
             }
      }
      break;
    case FIRST:
      jj_consume_token(FIRST);
              ASTFirstOfPairExpression jjtn003 = (ASTFirstOfPairExpression)ASTFirstOfPairExpression.jjtCreate(this, JJTFIRSTOFPAIREXPRESSION);
              boolean jjtc003 = true;
              jjtree.openNodeScope(jjtn003);
      try {
        SetExpression();
      } catch (Throwable jjte003) {
              if (jjtc003) {
                jjtree.clearNodeScope(jjtn003);
                jjtc003 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte003 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte003;}
              }
              if (jjte003 instanceof ParseException) {
                {if (true) throw (ParseException)jjte003;}
              }
              {if (true) throw (Error)jjte003;}
      } finally {
              if (jjtc003) {
                jjtree.closeNodeScope(jjtn003, true);
              }
      }
      break;
    case SECOND:
      jj_consume_token(SECOND);
               ASTSecondOfPairExpression jjtn004 = (ASTSecondOfPairExpression)ASTSecondOfPairExpression.jjtCreate(this, JJTSECONDOFPAIREXPRESSION);
               boolean jjtc004 = true;
               jjtree.openNodeScope(jjtn004);
      try {
        SetExpression();
      } catch (Throwable jjte004) {
               if (jjtc004) {
                 jjtree.clearNodeScope(jjtn004);
                 jjtc004 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte004 instanceof RuntimeException) {
                 {if (true) throw (RuntimeException)jjte004;}
               }
               if (jjte004 instanceof ParseException) {
                 {if (true) throw (ParseException)jjte004;}
               }
               {if (true) throw (Error)jjte004;}
      } finally {
               if (jjtc004) {
                 jjtree.closeNodeScope(jjtn004, true);
               }
      }
      break;
    case IDENTIFIER:
      Variable();
      break;
    case NIL:
    case FUN:
    case TRUE:
    case FALSE:
    case INTEGER:
    case NOP:
      Value();
      break;
    case LPAREN:
      CommonLeftBracketExpression();
      break;
    case LET:
      LetExpression();
      break;
    case IF:
      IfThenElseExpression();
      break;
    case WHILE:
      WhileLoopExpression();
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// e := while e1 do e2 end
  final public void WhileLoopExpression() throws ParseException {
 /*@bgen(jjtree) WhileLoopExpression */
  ASTWhileLoopExpression jjtn000 = (ASTWhileLoopExpression)ASTWhileLoopExpression.jjtCreate(this, JJTWHILELOOPEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(WHILE);
      Expression();
      jj_consume_token(DO);
      Expression();
      jj_consume_token(END);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  public SimPLParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[15];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_0();
      jj_la1_1();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x0,0x93c04000,0x200000,0x100000,0x80000,0x0,0x0,0x38000,0x38000,0xc00,0xc00,0x3000,0x3000,0x92404000,0x92400000,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x113820,0x153c3e,0x0,0x0,0x0,0x300,0x300,0x0,0x0,0x0,0x0,0x0,0x0,0x153c3e,0x15383e,};
   }

  public SimPLParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public SimPLParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SimPLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  public SimPLParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SimPLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  public SimPLParser(SimPLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  public void ReInit(SimPLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[53];
    for (int i = 0; i < 53; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 15; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 53; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

}
