/* Generated By:JJTree: Do not edit this line. ./SimPLParserVisitor.java */

package javacc;

import utils.InterpretException;
import utils.TypeException;

public interface SimPLParserVisitor
{
  public Object visit(SimpleNode node, Object data) throws TypeException, InterpretException;
  public Object visit(ASTStart node, Object data) throws TypeException, InterpretException;
  public Object visit(ASTExpression node, Object data) throws TypeException, InterpretException;
  public Object visit(ASTVariable node, Object data) throws TypeException, InterpretException;
  public Object visit(ASTValue node, Object data) throws TypeException, InterpretException;
  public Object visit(ASTAnonymousFunctionNode node, Object data) throws TypeException, InterpretException;
  public Object visit(ASTCommonLeftBracketExpression node, Object data) throws TypeException, InterpretException;
  public Object visit(ASTPairExpression node, Object data) throws TypeException, InterpretException;
  public Object visit(ASTApplicationExpression node, Object data) throws TypeException, InterpretException;
  public Object visit(ASTBracketExpression node, Object data) throws TypeException, InterpretException;
  public Object visit(ASTLetExpression node, Object data) throws TypeException, InterpretException;
  public Object visit(ASTIfThenElseExpression node, Object data) throws TypeException, InterpretException;
  public Object visit(ASTSequenceExpression node, Object data) throws TypeException, InterpretException;
  public Object visit(ASTAssignNode node, Object data) throws TypeException, InterpretException;
  public Object visit(ASTJoinNode node, Object data) throws TypeException, InterpretException;
  public Object visit(ASTConditionalAndNode node, Object data) throws TypeException, InterpretException;
  public Object visit(ASTConditionalOrNode node, Object data) throws TypeException, InterpretException;
  public Object visit(ASTEqualityEqualNode node, Object data) throws TypeException, InterpretException;
  public Object visit(ASTEqualityBiggerThanNode node, Object data) throws TypeException, InterpretException;
  public Object visit(ASTEqualityLessThanNode node, Object data) throws TypeException, InterpretException;
  public Object visit(ASTAdditivePlusNode node, Object data) throws TypeException, InterpretException;
  public Object visit(ASTAdditiveMinusNode node, Object data) throws TypeException, InterpretException;
  public Object visit(ASTMultiplicativeMultiplyNode node, Object data) throws TypeException, InterpretException;
  public Object visit(ASTMultiplicativeDivideNode node, Object data) throws TypeException, InterpretException;
  public Object visit(ASTUnaryNotNode node, Object data) throws TypeException, InterpretException;
  public Object visit(ASTUnaryNegativeNode node, Object data) throws TypeException, InterpretException;
  public Object visit(ASTHeadOfListExpression node, Object data) throws TypeException, InterpretException;
  public Object visit(ASTTailOfListExpression node, Object data) throws TypeException, InterpretException;
  public Object visit(ASTFirstOfPairExpression node, Object data) throws TypeException, InterpretException;
  public Object visit(ASTSecondOfPairExpression node, Object data) throws TypeException, InterpretException;
  public Object visit(ASTWhileLoopExpression node, Object data) throws TypeException, InterpretException;
}
