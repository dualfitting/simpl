/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. ./SimPLParser.jj */
/*@egen*//**
 * JavaCC file
 */
 
options {
  //JDK_VERSION = "1.5";
  LOOKAHEAD = 1 ;                        
  STATIC = false;                                                                
}
PARSER_BEGIN(SimPLParser)
package javacc;

import java.util.ArrayList;
import semantics.SimPLTypes;

public class SimPLParser/*@bgen(jjtree)*/implements SimPLParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTSimPLParserState jjtree = new JJTSimPLParserState();

/*@egen*/


}
PARSER_END(SimPLParser)


/*
 * SimPL Syntax
 */
SKIP :
{
  <SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
|    " "
|   "\r"
|   "\t"
|   "\n"
}


TOKEN : /* OPERATORS AND PUNCTUATION CHARACTERS */
{
    < PLUS: "+" >
|   < MINUS: "-" >
|   < MULTIPLY: "*" >
|   < DIVIDE: "/" >
|   < NEGATIVE: "~" >
|   < EQUAL: "=" >
|   < LESSTHAN: "<" >
|   < BIGGERTHAN: ">" >
|   < ARROW: "->" >
|   < JOIN: "::" >
|   < ASSIGN: ":=" >
|   < SEMICOLON: ";" >
|   < LPAREN: "(" >
|   < RPAREN: ")" >
|   < COMMA: "," >
}

TOKEN : /* RESERVED WORDS */
{
    < LET: "let" >
|   < IN:  "in" >
|   < END: "end" >
|   < IF: "if" >
|   < THEN: "then" >
|   < ELSE: "else" >
|   < WHILE: "while" >
|   < DO: "do" >
|   < FIRST: "fst" >
|   < SECOND: "snd" >
|   < HEAD: "head" >
|   < TAIL: "tail" >
|   < NIL: "nil" >
|   < INT: "int" >
|   < BOOL: "bool" >
|   < AND: "and" >
|   < OR: "or" >
|   < NOT: "not" >
|   < FUN: "fun" >
|   < TRUE: "true" >
|   < FALSE: "false" >
|   < LIST: "list" >
|   < UNIT: "unit" >
}


TOKEN : /* LITERALS */
{

    < INTEGER: (<DIGIT>)+ >
|   < #DIGIT: ["0" - "9"] >
|   < IDENTIFIER: <LETTER> ( <DIGIT> | <LETTER> )* >
|   < #LETTER: ["a" - "z"] >
|   < NOP: <LPAREN> <RPAREN> >
}

/*
 * SimPL Grammar
 */

// Program structuring syntax follows

SimpleNode Start() :
{/*@bgen(jjtree) Start */
  ASTStart jjtn000 = (ASTStart)ASTStart.jjtCreate(this, JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
        try {
/*@egen*/
	Expression()/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

// Expression syntax follows
void Expression() :
{/*@bgen(jjtree) Expression */
  ASTExpression jjtn000 = (ASTExpression)ASTExpression.jjtCreate(this, JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Expression */
        try {
/*@egen*/
	SequenceExpression()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

void Variable() :
{/*@bgen(jjtree) Variable */
        ASTVariable jjtn000 = (ASTVariable)ASTVariable.jjtCreate(this, JJTVARIABLE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token identifier;
}
{/*@bgen(jjtree) Variable */
    try {
/*@egen*/
    identifier=<IDENTIFIER>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { jjtn000.setName(identifier.image); }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


void Value() :
{/*@bgen(jjtree) Value */
        ASTValue jjtn000 = (ASTValue)ASTValue.jjtCreate(this, JJTVALUE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token val;
}
{/*@bgen(jjtree) Value */
    try {
/*@egen*/
    (
    val = <INTEGER>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
    	jjtn000.setIntValue(Integer.parseInt(val.image));
    	jjtn000.setType(SimPLTypes.TYPE_INTEGER);
    }
|   <TRUE>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
    	jjtn000.setBoolValue(true);
    	jjtn000.setType(SimPLTypes.TYPE_BOOLEAN);
    }
|   <FALSE>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		jjtn000.setBoolValue(false);
		jjtn000.setType(SimPLTypes.TYPE_BOOLEAN);
	}
|   <NIL>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		jjtn000.setListValue(new ArrayList<Object>());
		jjtn000.setType(SimPLTypes.TYPE_LIST);
	}
|   <NOP>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
    	jjtn000.setType(SimPLTypes.TYPE_UNIT);
    }
|/*@bgen(jjtree) AnonymousFunctionNode */
    {
      ASTAnonymousFunctionNode jjtn001 = (ASTAnonymousFunctionNode)ASTAnonymousFunctionNode.jjtCreate(this, JJTANONYMOUSFUNCTIONNODE);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/   (<FUN> Variable() <ARROW> Expression())/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
    }
/*@egen*//*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
    	jjtn000.setType(SimPLTypes.TYPE_FUNCTION);
    })/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/ 
}

void CommonLeftBracketExpression() :{/*@bgen(jjtree) CommonLeftBracketExpression */
  ASTCommonLeftBracketExpression jjtn000 = (ASTCommonLeftBracketExpression)ASTCommonLeftBracketExpression.jjtCreate(this, JJTCOMMONLEFTBRACKETEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
	
}{/*@bgen(jjtree) CommonLeftBracketExpression */
        try {
/*@egen*/	<LPAREN> Expression() ( 	    ApplicationExpression()	|   BracketExpression()	|   PairExpression()	)/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/	}
// e := (e1, e2)
void PairExpression() :
{/*@bgen(jjtree) PairExpression */
  ASTPairExpression jjtn000 = (ASTPairExpression)ASTPairExpression.jjtCreate(this, JJTPAIREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PairExpression */
    try {
/*@egen*/
    <COMMA> Expression() <RPAREN>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

// e := (e1 e2)
void ApplicationExpression() :
{/*@bgen(jjtree) ApplicationExpression */
  ASTApplicationExpression jjtn000 = (ASTApplicationExpression)ASTApplicationExpression.jjtCreate(this, JJTAPPLICATIONEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ApplicationExpression */
     try {
/*@egen*/
     Expression() <RPAREN>/*@bgen(jjtree)*/
     } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         throw (RuntimeException)jjte000;
       }
       if (jjte000 instanceof ParseException) {
         throw (ParseException)jjte000;
       }
       throw (Error)jjte000;
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
     }
/*@egen*/
}


// e := (e)
void BracketExpression() :
{/*@bgen(jjtree) BracketExpression */
  ASTBracketExpression jjtn000 = (ASTBracketExpression)ASTBracketExpression.jjtCreate(this, JJTBRACKETEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) BracketExpression */
     try {
/*@egen*/
     <RPAREN>/*@bgen(jjtree)*/
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
     }
/*@egen*/
}

// e := let x = e1 in e2 end
void LetExpression() :
{/*@bgen(jjtree) LetExpression */
  ASTLetExpression jjtn000 = (ASTLetExpression)ASTLetExpression.jjtCreate(this, JJTLETEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) LetExpression */
    try {
/*@egen*/
    <LET> Variable() <EQUAL> Expression() <IN> Expression() <END>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

// e := if e1 then e2 else e3 end
void IfThenElseExpression() :
{/*@bgen(jjtree) IfThenElseExpression */
  ASTIfThenElseExpression jjtn000 = (ASTIfThenElseExpression)ASTIfThenElseExpression.jjtCreate(this, JJTIFTHENELSEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) IfThenElseExpression */
    try {
/*@egen*/
    <IF> Expression() <THEN> Expression() <ELSE> Expression() <END>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

// e := e1;e2
void SequenceExpression() :{/*@bgen(jjtree) SequenceExpression */
  ASTSequenceExpression jjtn000 = (ASTSequenceExpression)ASTSequenceExpression.jjtCreate(this, JJTSEQUENCEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) SequenceExpression */
    try {
/*@egen*/    AssignExpression() 
    (<SEMICOLON> AssignExpression()
    )*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/}

// e := e1 := e2
void AssignExpression()      :
{}
{
    JoinExpression()
    (<ASSIGN>/*@bgen(jjtree) #AssignNode( 2) */
              {
                ASTAssignNode jjtn001 = (ASTAssignNode)ASTAssignNode.jjtCreate(this, JJTASSIGNNODE);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
              }
              try {
/*@egen*/ JoinExpression()/*@bgen(jjtree)*/
              } catch (Throwable jjte001) {
                if (jjtc001) {
                  jjtree.clearNodeScope(jjtn001);
                  jjtc001 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte001 instanceof RuntimeException) {
                  throw (RuntimeException)jjte001;
                }
                if (jjte001 instanceof ParseException) {
                  throw (ParseException)jjte001;
                }
                throw (Error)jjte001;
              } finally {
                if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001,  2);
                }
              }
/*@egen*/
    )*
}

void JoinExpression()      :
{}
{
	ConditionalExpression()
	( <JOIN>/*@bgen(jjtree) #JoinNode( 2) */
                 {
                   ASTJoinNode jjtn001 = (ASTJoinNode)ASTJoinNode.jjtCreate(this, JJTJOINNODE);
                   boolean jjtc001 = true;
                   jjtree.openNodeScope(jjtn001);
                 }
                 try {
/*@egen*/ ConditionalExpression()/*@bgen(jjtree)*/
                 } catch (Throwable jjte001) {
                   if (jjtc001) {
                     jjtree.clearNodeScope(jjtn001);
                     jjtc001 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte001 instanceof RuntimeException) {
                     throw (RuntimeException)jjte001;
                   }
                   if (jjte001 instanceof ParseException) {
                     throw (ParseException)jjte001;
                   }
                   throw (Error)jjte001;
                 } finally {
                   if (jjtc001) {
                     jjtree.closeNodeScope(jjtn001,  2);
                   }
                 }
/*@egen*/
	)*
}

void ConditionalExpression()      :
{}
{
	EqualityExpression()
	( 
	    <AND>/*@bgen(jjtree) #ConditionalAndNode( 2) */
                  {
                    ASTConditionalAndNode jjtn001 = (ASTConditionalAndNode)ASTConditionalAndNode.jjtCreate(this, JJTCONDITIONALANDNODE);
                    boolean jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
                  }
                  try {
/*@egen*/ EqualityExpression()/*@bgen(jjtree)*/
                  } catch (Throwable jjte001) {
                    if (jjtc001) {
                      jjtree.clearNodeScope(jjtn001);
                      jjtc001 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte001 instanceof RuntimeException) {
                      throw (RuntimeException)jjte001;
                    }
                    if (jjte001 instanceof ParseException) {
                      throw (ParseException)jjte001;
                    }
                    throw (Error)jjte001;
                  } finally {
                    if (jjtc001) {
                      jjtree.closeNodeScope(jjtn001,  2);
                    }
                  }
/*@egen*/
	|   <OR>/*@bgen(jjtree) #ConditionalOrNode( 2) */
                  {
                    ASTConditionalOrNode jjtn002 = (ASTConditionalOrNode)ASTConditionalOrNode.jjtCreate(this, JJTCONDITIONALORNODE);
                    boolean jjtc002 = true;
                    jjtree.openNodeScope(jjtn002);
                  }
                  try {
/*@egen*/  EqualityExpression()/*@bgen(jjtree)*/
                  } catch (Throwable jjte002) {
                    if (jjtc002) {
                      jjtree.clearNodeScope(jjtn002);
                      jjtc002 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte002 instanceof RuntimeException) {
                      throw (RuntimeException)jjte002;
                    }
                    if (jjte002 instanceof ParseException) {
                      throw (ParseException)jjte002;
                    }
                    throw (Error)jjte002;
                  } finally {
                    if (jjtc002) {
                      jjtree.closeNodeScope(jjtn002,  2);
                    }
                  }
/*@egen*/
	)*
}

void EqualityExpression()      :
{}
{
	AdditiveExpression()
	(
	    <EQUAL>/*@bgen(jjtree) #EqualityEqualNode( 2) */
                    {
                      ASTEqualityEqualNode jjtn001 = (ASTEqualityEqualNode)ASTEqualityEqualNode.jjtCreate(this, JJTEQUALITYEQUALNODE);
                      boolean jjtc001 = true;
                      jjtree.openNodeScope(jjtn001);
                    }
                    try {
/*@egen*/ AdditiveExpression()/*@bgen(jjtree)*/
                    } catch (Throwable jjte001) {
                      if (jjtc001) {
                        jjtree.clearNodeScope(jjtn001);
                        jjtc001 = false;
                      } else {
                        jjtree.popNode();
                      }
                      if (jjte001 instanceof RuntimeException) {
                        throw (RuntimeException)jjte001;
                      }
                      if (jjte001 instanceof ParseException) {
                        throw (ParseException)jjte001;
                      }
                      throw (Error)jjte001;
                    } finally {
                      if (jjtc001) {
                        jjtree.closeNodeScope(jjtn001,  2);
                      }
                    }
/*@egen*/
	|   <BIGGERTHAN>/*@bgen(jjtree) #EqualityBiggerThanNode( 2) */
                         {
                           ASTEqualityBiggerThanNode jjtn002 = (ASTEqualityBiggerThanNode)ASTEqualityBiggerThanNode.jjtCreate(this, JJTEQUALITYBIGGERTHANNODE);
                           boolean jjtc002 = true;
                           jjtree.openNodeScope(jjtn002);
                         }
                         try {
/*@egen*/ AdditiveExpression()/*@bgen(jjtree)*/
                         } catch (Throwable jjte002) {
                           if (jjtc002) {
                             jjtree.clearNodeScope(jjtn002);
                             jjtc002 = false;
                           } else {
                             jjtree.popNode();
                           }
                           if (jjte002 instanceof RuntimeException) {
                             throw (RuntimeException)jjte002;
                           }
                           if (jjte002 instanceof ParseException) {
                             throw (ParseException)jjte002;
                           }
                           throw (Error)jjte002;
                         } finally {
                           if (jjtc002) {
                             jjtree.closeNodeScope(jjtn002,  2);
                           }
                         }
/*@egen*/
	|   <LESSTHAN>/*@bgen(jjtree) #EqualityLessThanNode( 2) */
                       {
                         ASTEqualityLessThanNode jjtn003 = (ASTEqualityLessThanNode)ASTEqualityLessThanNode.jjtCreate(this, JJTEQUALITYLESSTHANNODE);
                         boolean jjtc003 = true;
                         jjtree.openNodeScope(jjtn003);
                       }
                       try {
/*@egen*/ AdditiveExpression()/*@bgen(jjtree)*/
                       } catch (Throwable jjte003) {
                         if (jjtc003) {
                           jjtree.clearNodeScope(jjtn003);
                           jjtc003 = false;
                         } else {
                           jjtree.popNode();
                         }
                         if (jjte003 instanceof RuntimeException) {
                           throw (RuntimeException)jjte003;
                         }
                         if (jjte003 instanceof ParseException) {
                           throw (ParseException)jjte003;
                         }
                         throw (Error)jjte003;
                       } finally {
                         if (jjtc003) {
                           jjtree.closeNodeScope(jjtn003,  2);
                         }
                       }
/*@egen*/
	)*
}

void AdditiveExpression()      :
{}
{
	MultiplicativeExpression()
	(
	    <PLUS>/*@bgen(jjtree) #AdditivePlusNode( 2) */
                   {
                     ASTAdditivePlusNode jjtn001 = (ASTAdditivePlusNode)ASTAdditivePlusNode.jjtCreate(this, JJTADDITIVEPLUSNODE);
                     boolean jjtc001 = true;
                     jjtree.openNodeScope(jjtn001);
                   }
                   try {
/*@egen*/ MultiplicativeExpression()/*@bgen(jjtree)*/
                   } catch (Throwable jjte001) {
                     if (jjtc001) {
                       jjtree.clearNodeScope(jjtn001);
                       jjtc001 = false;
                     } else {
                       jjtree.popNode();
                     }
                     if (jjte001 instanceof RuntimeException) {
                       throw (RuntimeException)jjte001;
                     }
                     if (jjte001 instanceof ParseException) {
                       throw (ParseException)jjte001;
                     }
                     throw (Error)jjte001;
                   } finally {
                     if (jjtc001) {
                       jjtree.closeNodeScope(jjtn001,  2);
                     }
                   }
/*@egen*/
	|   <MINUS>/*@bgen(jjtree) #AdditiveMinusNode( 2) */
                    {
                      ASTAdditiveMinusNode jjtn002 = (ASTAdditiveMinusNode)ASTAdditiveMinusNode.jjtCreate(this, JJTADDITIVEMINUSNODE);
                      boolean jjtc002 = true;
                      jjtree.openNodeScope(jjtn002);
                    }
                    try {
/*@egen*/ MultiplicativeExpression()/*@bgen(jjtree)*/
                    } catch (Throwable jjte002) {
                      if (jjtc002) {
                        jjtree.clearNodeScope(jjtn002);
                        jjtc002 = false;
                      } else {
                        jjtree.popNode();
                      }
                      if (jjte002 instanceof RuntimeException) {
                        throw (RuntimeException)jjte002;
                      }
                      if (jjte002 instanceof ParseException) {
                        throw (ParseException)jjte002;
                      }
                      throw (Error)jjte002;
                    } finally {
                      if (jjtc002) {
                        jjtree.closeNodeScope(jjtn002,  2);
                      }
                    }
/*@egen*/
	)*     
}

void MultiplicativeExpression()      :
{}
{
	UnaryExpression()
	(
	    <MULTIPLY>/*@bgen(jjtree) #MultiplicativeMultiplyNode( 2) */
                       {
                         ASTMultiplicativeMultiplyNode jjtn001 = (ASTMultiplicativeMultiplyNode)ASTMultiplicativeMultiplyNode.jjtCreate(this, JJTMULTIPLICATIVEMULTIPLYNODE);
                         boolean jjtc001 = true;
                         jjtree.openNodeScope(jjtn001);
                       }
                       try {
/*@egen*/ UnaryExpression()/*@bgen(jjtree)*/
                       } catch (Throwable jjte001) {
                         if (jjtc001) {
                           jjtree.clearNodeScope(jjtn001);
                           jjtc001 = false;
                         } else {
                           jjtree.popNode();
                         }
                         if (jjte001 instanceof RuntimeException) {
                           throw (RuntimeException)jjte001;
                         }
                         if (jjte001 instanceof ParseException) {
                           throw (ParseException)jjte001;
                         }
                         throw (Error)jjte001;
                       } finally {
                         if (jjtc001) {
                           jjtree.closeNodeScope(jjtn001,  2);
                         }
                       }
/*@egen*/
	|   <DIVIDE>/*@bgen(jjtree) #MultiplicativeDivideNode( 2) */
                     {
                       ASTMultiplicativeDivideNode jjtn002 = (ASTMultiplicativeDivideNode)ASTMultiplicativeDivideNode.jjtCreate(this, JJTMULTIPLICATIVEDIVIDENODE);
                       boolean jjtc002 = true;
                       jjtree.openNodeScope(jjtn002);
                     }
                     try {
/*@egen*/ UnaryExpression()/*@bgen(jjtree)*/
                     } catch (Throwable jjte002) {
                       if (jjtc002) {
                         jjtree.clearNodeScope(jjtn002);
                         jjtc002 = false;
                       } else {
                         jjtree.popNode();
                       }
                       if (jjte002 instanceof RuntimeException) {
                         throw (RuntimeException)jjte002;
                       }
                       if (jjte002 instanceof ParseException) {
                         throw (ParseException)jjte002;
                       }
                       throw (Error)jjte002;
                     } finally {
                       if (jjtc002) {
                         jjtree.closeNodeScope(jjtn002,  2);
                       }
                     }
/*@egen*/
	)*
}

void UnaryExpression()      :
{}
{
	<NOT>/*@bgen(jjtree) UnaryNotNode */
              {
                ASTUnaryNotNode jjtn001 = (ASTUnaryNotNode)ASTUnaryNotNode.jjtCreate(this, JJTUNARYNOTNODE);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
              }
              try {
/*@egen*/ UnaryExpression()/*@bgen(jjtree)*/
              } catch (Throwable jjte001) {
                if (jjtc001) {
                  jjtree.clearNodeScope(jjtn001);
                  jjtc001 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte001 instanceof RuntimeException) {
                  throw (RuntimeException)jjte001;
                }
                if (jjte001 instanceof ParseException) {
                  throw (ParseException)jjte001;
                }
                throw (Error)jjte001;
              } finally {
                if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001, true);
                }
              }
/*@egen*/
|	<NEGATIVE>/*@bgen(jjtree) UnaryNegativeNode */
                   {
                     ASTUnaryNegativeNode jjtn002 = (ASTUnaryNegativeNode)ASTUnaryNegativeNode.jjtCreate(this, JJTUNARYNEGATIVENODE);
                     boolean jjtc002 = true;
                     jjtree.openNodeScope(jjtn002);
                   }
                   try {
/*@egen*/ UnaryExpression()/*@bgen(jjtree)*/
                   } catch (Throwable jjte002) {
                     if (jjtc002) {
                       jjtree.clearNodeScope(jjtn002);
                       jjtc002 = false;
                     } else {
                       jjtree.popNode();
                     }
                     if (jjte002 instanceof RuntimeException) {
                       throw (RuntimeException)jjte002;
                     }
                     if (jjte002 instanceof ParseException) {
                       throw (ParseException)jjte002;
                     }
                     throw (Error)jjte002;
                   } finally {
                     if (jjtc002) {
                       jjtree.closeNodeScope(jjtn002, true);
                     }
                   }
/*@egen*/
|   SetExpression()
}


void SetExpression()      :
{}
{
	<HEAD>/*@bgen(jjtree) HeadOfListExpression */
               {
                 ASTHeadOfListExpression jjtn001 = (ASTHeadOfListExpression)ASTHeadOfListExpression.jjtCreate(this, JJTHEADOFLISTEXPRESSION);
                 boolean jjtc001 = true;
                 jjtree.openNodeScope(jjtn001);
               }
               try {
/*@egen*/ SetExpression()/*@bgen(jjtree)*/
               } catch (Throwable jjte001) {
                 if (jjtc001) {
                   jjtree.clearNodeScope(jjtn001);
                   jjtc001 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte001 instanceof RuntimeException) {
                   throw (RuntimeException)jjte001;
                 }
                 if (jjte001 instanceof ParseException) {
                   throw (ParseException)jjte001;
                 }
                 throw (Error)jjte001;
               } finally {
                 if (jjtc001) {
                   jjtree.closeNodeScope(jjtn001, true);
                 }
               }
/*@egen*/
|   <TAIL>/*@bgen(jjtree) TailOfListExpression */
           {
             ASTTailOfListExpression jjtn002 = (ASTTailOfListExpression)ASTTailOfListExpression.jjtCreate(this, JJTTAILOFLISTEXPRESSION);
             boolean jjtc002 = true;
             jjtree.openNodeScope(jjtn002);
           }
           try {
/*@egen*/ SetExpression()/*@bgen(jjtree)*/
           } catch (Throwable jjte002) {
             if (jjtc002) {
               jjtree.clearNodeScope(jjtn002);
               jjtc002 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte002 instanceof RuntimeException) {
               throw (RuntimeException)jjte002;
             }
             if (jjte002 instanceof ParseException) {
               throw (ParseException)jjte002;
             }
             throw (Error)jjte002;
           } finally {
             if (jjtc002) {
               jjtree.closeNodeScope(jjtn002, true);
             }
           }
/*@egen*/
|   <FIRST>/*@bgen(jjtree) FirstOfPairExpression */
            {
              ASTFirstOfPairExpression jjtn003 = (ASTFirstOfPairExpression)ASTFirstOfPairExpression.jjtCreate(this, JJTFIRSTOFPAIREXPRESSION);
              boolean jjtc003 = true;
              jjtree.openNodeScope(jjtn003);
            }
            try {
/*@egen*/ SetExpression()/*@bgen(jjtree)*/
            } catch (Throwable jjte003) {
              if (jjtc003) {
                jjtree.clearNodeScope(jjtn003);
                jjtc003 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte003 instanceof RuntimeException) {
                throw (RuntimeException)jjte003;
              }
              if (jjte003 instanceof ParseException) {
                throw (ParseException)jjte003;
              }
              throw (Error)jjte003;
            } finally {
              if (jjtc003) {
                jjtree.closeNodeScope(jjtn003, true);
              }
            }
/*@egen*/
|   <SECOND>/*@bgen(jjtree) SecondOfPairExpression */
             {
               ASTSecondOfPairExpression jjtn004 = (ASTSecondOfPairExpression)ASTSecondOfPairExpression.jjtCreate(this, JJTSECONDOFPAIREXPRESSION);
               boolean jjtc004 = true;
               jjtree.openNodeScope(jjtn004);
             }
             try {
/*@egen*/ SetExpression()/*@bgen(jjtree)*/
             } catch (Throwable jjte004) {
               if (jjtc004) {
                 jjtree.clearNodeScope(jjtn004);
                 jjtc004 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte004 instanceof RuntimeException) {
                 throw (RuntimeException)jjte004;
               }
               if (jjte004 instanceof ParseException) {
                 throw (ParseException)jjte004;
               }
               throw (Error)jjte004;
             } finally {
               if (jjtc004) {
                 jjtree.closeNodeScope(jjtn004, true);
               }
             }
/*@egen*/
|   Variable()
|   Value()
|   CommonLeftBracketExpression()
|   LetExpression()
|   IfThenElseExpression()
|   WhileLoopExpression()
}
// e := while e1 do e2 end
void WhileLoopExpression() :
{/*@bgen(jjtree) WhileLoopExpression */
  ASTWhileLoopExpression jjtn000 = (ASTWhileLoopExpression)ASTWhileLoopExpression.jjtCreate(this, JJTWHILELOOPEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) WhileLoopExpression */
    try {
/*@egen*/
    <WHILE> Expression() <DO> Expression() <END>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

//// e := fst e//void FirstOfPairExpression() ://{}//{//    <FIRST> Expression()//}////// e := snd e//void SecondOfPairExpression() ://{}//{//    <SECOND> Expression() //}////// e := head e//void HeadOfListExpression() ://{}//{//    <HEAD> Expression()//}////// e := tail e//void TailOfListExpression() ://{}//{//    <TAIL> Expression()//}





