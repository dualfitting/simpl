/* Generated By:JJTree: Do not edit this line. ./SimPLParserTreeConstants.java */

package javacc;

public interface SimPLParserTreeConstants
{
  public int JJTSTART = 0;
  public int JJTEXPRESSION = 1;
  public int JJTVARIABLE = 2;
  public int JJTVALUE = 3;
  public int JJTANONYMOUSFUNCTIONNODE = 4;
  public int JJTCOMMONLEFTBRACKETEXPRESSION = 5;
  public int JJTPAIREXPRESSION = 6;
  public int JJTAPPLICATIONEXPRESSION = 7;
  public int JJTBRACKETEXPRESSION = 8;
  public int JJTLETEXPRESSION = 9;
  public int JJTIFTHENELSEEXPRESSION = 10;
  public int JJTSEQUENCEEXPRESSION = 11;
  public int JJTVOID = 12;
  public int JJTASSIGNNODE = 13;
  public int JJTJOINNODE = 14;
  public int JJTCONDITIONALANDNODE = 15;
  public int JJTCONDITIONALORNODE = 16;
  public int JJTEQUALITYEQUALNODE = 17;
  public int JJTEQUALITYBIGGERTHANNODE = 18;
  public int JJTEQUALITYLESSTHANNODE = 19;
  public int JJTADDITIVEPLUSNODE = 20;
  public int JJTADDITIVEMINUSNODE = 21;
  public int JJTMULTIPLICATIVEMULTIPLYNODE = 22;
  public int JJTMULTIPLICATIVEDIVIDENODE = 23;
  public int JJTUNARYNOTNODE = 24;
  public int JJTUNARYNEGATIVENODE = 25;
  public int JJTHEADOFLISTEXPRESSION = 26;
  public int JJTTAILOFLISTEXPRESSION = 27;
  public int JJTFIRSTOFPAIREXPRESSION = 28;
  public int JJTSECONDOFPAIREXPRESSION = 29;
  public int JJTWHILELOOPEXPRESSION = 30;


  public String[] jjtNodeName = {
    "Start",
    "Expression",
    "Variable",
    "Value",
    "AnonymousFunctionNode",
    "CommonLeftBracketExpression",
    "PairExpression",
    "ApplicationExpression",
    "BracketExpression",
    "LetExpression",
    "IfThenElseExpression",
    "SequenceExpression",
    "void",
    "AssignNode",
    "JoinNode",
    "ConditionalAndNode",
    "ConditionalOrNode",
    "EqualityEqualNode",
    "EqualityBiggerThanNode",
    "EqualityLessThanNode",
    "AdditivePlusNode",
    "AdditiveMinusNode",
    "MultiplicativeMultiplyNode",
    "MultiplicativeDivideNode",
    "UnaryNotNode",
    "UnaryNegativeNode",
    "HeadOfListExpression",
    "TailOfListExpression",
    "FirstOfPairExpression",
    "SecondOfPairExpression",
    "WhileLoopExpression",
  };
}
